// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "forge-std/Script.sol";

interface IAavePool {
    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
    function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) external;
    function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf) external returns (uint256);
}

contract CreateTestActivities is Script {
    // Sepolia Aave V3 Pool
    address constant AAVE_POOL_SEPOLIA = 0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951;
    
    // Sepolia test tokens
    address constant USDC_SEPOLIA = 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238;
    address constant DAI_SEPOLIA = 0xFF34B3d4Aee8ddCd6F9AFFFB6Fe49bD371b8a357;

    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        // Create Aave interactions
        createAaveActivities();

        vm.stopBroadcast();
    }

    function createAaveActivities() internal {
        IAavePool aavePool = IAavePool(AAVE_POOL_SEPOLIA);
        
        // Supply USDC
        aavePool.supply(USDC_SEPOLIA, 1000e6, msg.sender, 0);
        console.log("Supplied 1000 USDC to Aave");
        
        // Borrow DAI
        aavePool.borrow(DAI_SEPOLIA, 500e18, 2, 0, msg.sender);
        console.log("Borrowed 500 DAI from Aave");
        
        // Repay partial loan
        aavePool.repay(DAI_SEPOLIA, 200e18, 2, msg.sender);
        console.log("Repaid 200 DAI to Aave");
    }
}