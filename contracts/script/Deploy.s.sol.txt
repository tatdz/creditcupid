// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "forge-std/Script.sol";
import "../src/DarmaCreditOracle.sol";
import "../src/UnderCollateralizedLending.sol";

contract DeployScript is Script {
    // Sepolia Pyth contract address
    address constant PYTH_SEPOLIA = 0x2880aB155794e7179c9eE2e38200202908C17B43;
    
    // Sepolia test tokens
    address constant USDC_SEPOLIA = 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238;
    address constant DAI_SEPOLIA = 0xFF34B3d4Aee8ddCd6F9AFFFB6Fe49bD371b8a357;
    address constant WETH_SEPOLIA = 0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14;

    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        
        vm.startBroadcast(deployerPrivateKey);

        // Deploy DarmaCreditOracle
        DarmaCreditOracle creditOracle = new DarmaCreditOracle(PYTH_SEPOLIA);
        console.log("DarmaCreditOracle deployed at: %s", address(creditOracle));

        // Deploy UnderCollateralizedLending
        UnderCollateralizedLending lending = new UnderCollateralizedLending(address(creditOracle));
        console.log("UnderCollateralizedLending deployed at: %s", address(lending));

        // Add supported tokens
        lending.addSupportedToken(USDC_SEPOLIA);
        lending.addSupportedToken(DAI_SEPOLIA);
        lending.addSupportedToken(WETH_SEPOLIA);
        console.log("Added supported tokens to lending platform");

        vm.stopBroadcast();
    }
}