{"version":3,"sources":["../src/utils/custom-errors.ts","../src/utils/gateway-tools.ts","../src/utils/resumable.ts","../src/utils/format-config.ts"],"names":[],"mappings":"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","file":"chunk-ME652TQB.mjs","sourcesContent":["interface ErrorDetails {\n\terror?: string;\n\tcode?: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport class PinataError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic statusCode?: number,\n\t\tpublic details?: ErrorDetails,\n\t) {\n\t\tsuper(message);\n\t\tthis.name = \"PinataError\";\n\t}\n}\n\nexport class NetworkError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: ErrorDetails) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"NetworkError\";\n\t}\n}\n\nexport class AuthenticationError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: ErrorDetails) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"AuthenticationError\";\n\t}\n}\n\nexport class ValidationError extends PinataError {\n\tconstructor(message: string, details?: ErrorDetails) {\n\t\tsuper(message, undefined, details);\n\t\tthis.name = \"ValidationError\";\n\t}\n}\n","import { ContainsCIDResponse } from \"../core/types\";\n\nfunction isValidCIDv0(cid: string): boolean {\n\t// CIDv0 is a 46-character base58-encoded string starting with \"Qm\"\n\treturn /^Qm[1-9A-HJ-NP-Za-km-z]{44}$/.test(cid);\n}\n\nfunction isValidCIDv1(cid: string): boolean {\n\t// CIDv1 typically starts with \"b\" and uses base32 encoding\n\treturn /^b[a-z2-7]{58,}$/.test(cid);\n}\n\nfunction isCID(str: string): boolean {\n\t// Remove any leading/trailing whitespace\n\tstr = str.trim();\n\treturn isValidCIDv0(str) || isValidCIDv1(str);\n}\n\nexport async function containsCID(input: string): Promise<ContainsCIDResponse> {\n\tif (typeof input !== \"string\") {\n\t\tthrow new Error(\"Input is not a string\");\n\t}\n\n\t// Helper function to check if a string starts with a CID\n\tconst startsWithCID = (str: string) => {\n\t\tconst parts = str.split(\"/\");\n\t\treturn isCID(parts[0]) ? parts[0] : null;\n\t};\n\n\t// Check if the input itself is a CID or starts with a CID\n\tconst directCID = startsWithCID(input);\n\tif (directCID) {\n\t\treturn {\n\t\t\tcontainsCid: true,\n\t\t\tcid: directCID,\n\t\t};\n\t}\n\n\tlet url: URL;\n\ttry {\n\t\t// Try to parse the input as a URL\n\t\turl = new URL(input);\n\t} catch (error) {\n\t\t// If parsing fails, treat the input as a potential path-like string\n\t\tconst parts = input.split(/\\/|\\?/);\n\t\tfor (const part of parts) {\n\t\t\tconst cid = startsWithCID(part);\n\t\t\tif (cid) {\n\t\t\t\treturn {\n\t\t\t\t\tcontainsCid: true,\n\t\t\t\t\tcid: cid,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tcontainsCid: false,\n\t\t\tcid: null,\n\t\t};\n\t}\n\n\t// Check for CID in subdomain\n\tconst subdomains = url.hostname.split(\".\");\n\tfor (const subdomain of subdomains) {\n\t\tif (isCID(subdomain)) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: subdomain,\n\t\t\t};\n\t\t}\n\t}\n\n\t// Check for CID in path\n\tconst pathParts = url.pathname.split(\"/\");\n\tfor (const part of pathParts) {\n\t\tconst cid = startsWithCID(part);\n\t\tif (cid) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: cid,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tcontainsCid: false,\n\t\tcid: null,\n\t};\n}\n\nexport async function convertToDesiredGateway(\n\tsourceUrl: string,\n\tdesiredGatewayPrefix: string | undefined,\n) {\n\tconst results = await containsCID(sourceUrl);\n\n\tif (results.containsCid !== true) {\n\t\tthrow new Error(\"url does not contain CID\");\n\t}\n\n\tif (!sourceUrl.startsWith(\"https\") && !sourceUrl.startsWith(\"ipfs://\")) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${sourceUrl}`;\n\t}\n\n\tconst urlObj = new URL(sourceUrl);\n\tconst path = urlObj.pathname + urlObj.search + urlObj.hash;\n\n\t//case 1 - the ipfs://cid path\n\tif (sourceUrl.startsWith(`ipfs://${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//case 2 - the /ipfs/cid path (this should cover ipfs://ipfs/cid as well)\n\tif (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 3 - the /ipns/cid path\n\tif (sourceUrl.includes(`/ipns/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 4 - the CID is in the subdomain\n\tif (urlObj.hostname.includes(results.cid!)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//this is the fallback if no supported patterns are provided\n\tthrow new Error(\n\t\t\"unsupported URL pattern, please submit a github issue with the URL utilized\",\n\t);\n}\n","import { NetworkError } from \"./custom-errors\";\n\nexport function getFileIdFromUrl(url: string): string {\n\tconst match = url.match(/\\/files\\/([^\\/]+)/);\n\tif (match && match[1]) {\n\t\treturn match[1];\n\t}\n\tthrow new NetworkError(\"File ID not found in URL\", 400, {\n\t\terror: \"File ID not found in URL\",\n\t\tcode: \"HTTP_ERROR\",\n\t\tmetadata: {\n\t\t\trequestUrl: url,\n\t\t},\n\t});\n}\n","import { PinataConfig } from \"../core/types\";\n\nexport const formatConfig = (config: PinataConfig | undefined) => {\n\tlet gateway = config?.pinataGateway;\n\tif (config && gateway) {\n\t\tif (gateway && !gateway.startsWith(\"https://\")) {\n\t\t\tgateway = `https://${gateway}`;\n\t\t}\n\t\tconfig.pinataGateway = gateway;\n\t}\n\treturn config;\n};\n"]}