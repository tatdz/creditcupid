{"version":3,"sources":["../../src/react/hooks/useUpload.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\nimport {\n\tNetworkError,\n\tAuthenticationError,\n\ttype UseUploadReturn,\n\ttype UploadResult,\n\ttype ReactUploadOptions,\n} from \"../types\";\n\nconst LARGE_FILE_THRESHOLD = 94371840; // ~90MB\nconst BASE_CHUNK_SIZE = 262144; // 256KB\nconst DEFAULT_CHUNKS = 20 * 10;\n\nconst normalizeChunkSize = (size: number): number => {\n\tif (size < BASE_CHUNK_SIZE) {\n\t\treturn BASE_CHUNK_SIZE;\n\t}\n\treturn Math.floor(size / BASE_CHUNK_SIZE) * BASE_CHUNK_SIZE;\n};\n\nexport const useUpload = (): UseUploadReturn => {\n\tconst [progress, setProgress] = useState<number>(0);\n\tconst [loading, setLoading] = useState<boolean>(false);\n\tconst [error, setError] = useState<Error | null>(null);\n\tconst [uploadResponse, setUploadResponse] = useState<UploadResult | null>(\n\t\tnull,\n\t);\n\n\t// Refs for pause/resume/cancel\n\tconst uploadUrlRef = useRef<string | null>(null);\n\tconst pausedRef = useRef<boolean>(false);\n\tconst cancelledRef = useRef<boolean>(false);\n\tconst uploadOffsetRef = useRef<number>(0);\n\tconst fileRef = useRef<File | null>(null);\n\tconst headersRef = useRef<Record<string, string>>({});\n\tconst lastResponseHeadersRef = useRef<Headers | null>(null);\n\tconst chunkSizeRef = useRef<number>(BASE_CHUNK_SIZE * DEFAULT_CHUNKS);\n\n\tconst resetState = useCallback(() => {\n\t\tsetProgress(0);\n\t\tsetError(null);\n\t\tsetUploadResponse(null);\n\t\tuploadUrlRef.current = null;\n\t\tpausedRef.current = false;\n\t\tcancelledRef.current = false;\n\t\tuploadOffsetRef.current = 0;\n\t\tfileRef.current = null;\n\t}, []);\n\n\tconst pause = useCallback(() => {\n\t\tpausedRef.current = true;\n\t}, []);\n\n\tconst resume = useCallback(() => {\n\t\tif (pausedRef.current && uploadUrlRef.current && fileRef.current) {\n\t\t\tpausedRef.current = false;\n\t\t\tcontinueChunkedUpload();\n\t\t}\n\t}, []);\n\n\tconst cancel = useCallback(() => {\n\t\tcancelledRef.current = true;\n\t\tsetLoading(false);\n\t}, []);\n\n\t// Handle chunked upload for large files\n\tconst continueChunkedUpload = useCallback(async () => {\n\t\tif (!uploadUrlRef.current || !fileRef.current) return;\n\n\t\ttry {\n\t\t\tif (cancelledRef.current) {\n\t\t\t\tresetState();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pausedRef.current) return;\n\n\t\t\tconst file = fileRef.current;\n\t\t\tconst fileSize = file.size;\n\t\t\tconst offset = uploadOffsetRef.current;\n\t\t\tconst chunkSize = chunkSizeRef.current;\n\n\t\t\tif (offset >= fileSize) {\n\t\t\t\t// Upload is complete\n\t\t\t\tawait finalizeUpload();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst endOffset = Math.min(offset + chunkSize, fileSize);\n\t\t\tconst chunk = file.slice(offset, endOffset);\n\n\t\t\t// Upload chunk\n\t\t\tconst uploadReq = await fetch(uploadUrlRef.current, {\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/offset+octet-stream\",\n\t\t\t\t\t\"Upload-Offset\": offset.toString(),\n\t\t\t\t\t...headersRef.current,\n\t\t\t\t},\n\t\t\t\tbody: chunk,\n\t\t\t});\n\n\t\t\tlastResponseHeadersRef.current = uploadReq.headers;\n\n\t\t\tif (!uploadReq.ok) {\n\t\t\t\tconst errorData = await uploadReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during chunk upload: ${errorData}`,\n\t\t\t\t\tuploadReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: { requestUrl: uploadReq.url },\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Update offset and progress\n\t\t\tconst newOffset = endOffset;\n\t\t\tuploadOffsetRef.current = newOffset;\n\t\t\tconst newProgress = Math.min((newOffset / fileSize) * 100, 99.9);\n\t\t\tsetProgress(newProgress);\n\n\t\t\t// Continue with next chunk\n\t\t\tcontinueChunkedUpload();\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetError(new Error(\"Unknown error during upload\"));\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\t}, [resetState]);\n\n\t// Finalize upload and get response\n\tconst finalizeUpload = useCallback(async () => {\n\t\tif (!uploadUrlRef.current || !fileRef.current) return;\n\n\t\ttry {\n\t\t\t// Try to get CID from response headers\n\t\t\tlet cid = null;\n\t\t\tif (lastResponseHeadersRef.current) {\n\t\t\t\tcid = lastResponseHeadersRef.current.get(\"upload-cid\");\n\t\t\t}\n\n\t\t\t// If no CID in headers, we may need to fetch file info from the API\n\t\t\t// This would depend on your API's response format\n\n\t\t\tsetUploadResponse(cid);\n\t\t\tsetProgress(100);\n\t\t\tsetLoading(false);\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetError(new Error(\"Unknown error during upload finalization\"));\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\t}, []);\n\n\t// Direct upload for smaller files\n\tconst simpleUpload = async (\n\t\tfile: File,\n\t\tnetwork: \"public\" | \"private\",\n\t\turl: string,\n\t\toptions?: ReactUploadOptions,\n\t) => {\n\t\ttry {\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append(\"file\", file, file.name);\n\t\t\tformData.append(\"network\", network);\n\t\t\tformData.append(\"name\", options?.metadata?.name || file.name);\n\n\t\t\tif (options?.groupId) {\n\t\t\t\tformData.append(\"group_id\", options.groupId);\n\t\t\t}\n\n\t\t\tif (options?.metadata?.keyvalues) {\n\t\t\t\tformData.append(\n\t\t\t\t\t\"keyvalues\",\n\t\t\t\t\tJSON.stringify(options.metadata.keyvalues),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (options?.streamable) {\n\t\t\t\tformData.append(\"streamable\", \"true\");\n\t\t\t}\n\n\t\t\tconst request = await fetch(url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headersRef.current,\n\t\t\t\tbody: formData,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: { requestUrl: request.url },\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: { requestUrl: request.url },\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tsetUploadResponse(res.data);\n\t\t\tsetProgress(100);\n\t\t\tsetLoading(false);\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetError(new Error(\"Unknown error during upload\"));\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\t// Main upload function\n\tconst upload = useCallback(\n\t\tasync (\n\t\t\tfile: File,\n\t\t\tnetwork: \"public\" | \"private\",\n\t\t\turl: string,\n\t\t\toptions?: ReactUploadOptions,\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tresetState();\n\t\t\t\tsetLoading(true);\n\t\t\t\tfileRef.current = file;\n\n\t\t\t\t// Set up headers\n\t\t\t\tconst headers: Record<string, string> = { Source: \"sdk/react\" };\n\t\t\t\theadersRef.current = headers;\n\n\t\t\t\tif (options?.chunkSize && options.chunkSize > 0) {\n\t\t\t\t\tchunkSizeRef.current = normalizeChunkSize(options.chunkSize);\n\t\t\t\t} else {\n\t\t\t\t\tchunkSizeRef.current = BASE_CHUNK_SIZE * DEFAULT_CHUNKS;\n\t\t\t\t}\n\n\t\t\t\t// For smaller files, use simple upload\n\t\t\t\tif (file.size <= LARGE_FILE_THRESHOLD) {\n\t\t\t\t\tawait simpleUpload(file, network, url, options);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// For larger files, use chunked upload with TUS protocol\n\t\t\t\tlet metadata = `filename ${btoa(file.name)},filetype ${btoa(file.type)},network ${btoa(network)}`;\n\n\t\t\t\tif (options?.groupId) {\n\t\t\t\t\tmetadata += `,group_id ${btoa(options.groupId)}`;\n\t\t\t\t}\n\n\t\t\t\tif (options?.metadata?.keyvalues) {\n\t\t\t\t\tmetadata += `,keyvalues ${btoa(JSON.stringify(options.metadata.keyvalues))}`;\n\t\t\t\t}\n\n\t\t\t\tif (options?.streamable) {\n\t\t\t\t\tmetadata += `,streamable ${btoa(\"true\")}`;\n\t\t\t\t}\n\n\t\t\t\t// Initialize TUS upload\n\t\t\t\tconst urlReq = await fetch(url, {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"Upload-Length\": `${file.size}`,\n\t\t\t\t\t\t\"Upload-Metadata\": metadata,\n\t\t\t\t\t\t...headers,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (!urlReq.ok) {\n\t\t\t\t\tconst errorData = await urlReq.text();\n\t\t\t\t\tif (urlReq.status === 401 || urlReq.status === 403) {\n\t\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\t\turlReq.status,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NetworkError(\"Error initializing upload\", urlReq.status, {\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst uploadUrl = urlReq.headers.get(\"Location\");\n\t\t\t\tif (!uploadUrl) {\n\t\t\t\t\tthrow new NetworkError(\"Upload URL not provided\", urlReq.status, {\n\t\t\t\t\t\terror: \"No location header found\",\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tuploadUrlRef.current = uploadUrl;\n\n\t\t\t\t// Start chunked upload\n\t\t\t\tcontinueChunkedUpload();\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Error) {\n\t\t\t\t\tsetError(err);\n\t\t\t\t} else {\n\t\t\t\t\tsetError(new Error(\"Unknown error during upload initialization\"));\n\t\t\t\t}\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t},\n\t\t[resetState, continueChunkedUpload],\n\t);\n\n\t// Cleanup on unmount\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tcancelledRef.current = true;\n\t\t};\n\t}, []);\n\n\treturn {\n\t\tprogress,\n\t\tloading,\n\t\terror,\n\t\tuploadResponse,\n\t\tupload,\n\t\tpause,\n\t\tresume,\n\t\tcancel,\n\t};\n};\n"]}